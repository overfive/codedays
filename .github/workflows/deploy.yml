name: Deploy codeaday

on:
  push:
    branches:    
      - master

jobs:
  deploy-create:
    name: Create basic folder
    runs-on: self-hosted
    steps:
      - name: mkdir basic dir
        run: |
          sudo mkdir -p /opt/projects
          sudo chown -R qiwihui.qiwihui /opt/projects
  deploy-proxy:
    needs: deploy-create
    name: Deploy letsencrypt nginx proxy
    runs-on: self-hosted
    steps:
      - name: setup folder
        run: mkdir -p /opt/projects/
      - name: check if nginx proxy exists
        run: export HAS_LETSENCRYPT==$(sudo docker ps -a | grep nginx-letsencrypt >/dev/null; echo $?)
      - name: setup letsencrypt nginx proxy companion
        if: env.HAS_LETSENCRYPT == 1
        run: |
          mkdir -p /opt/projects/nginx-data
          git clone https://github.com/evertramos/docker-compose-letsencrypt-nginx-proxy-companion.git /opt/projects/docker-compose-letsencrypt-nginx-proxy-companion/
          cd docker-compose-letsencrypt-nginx-proxy-companion
          cp .env.sample .env
          sed -i "s/NGINX_FILES_PATH=.*/NGINX_FILES_PATH=\/opt\/projects\/nginx-data/g" .env
          sudo ./start.sh
  build-fe:
    name: Build frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: npm install, build, and test
        run: |
          cd cad_fe
          npm install
          npm run build
          rm dist/*/*.map

      - name: Archive production artifacts
        uses: actions/upload-artifact@v1
        with:
          name: cad_fe_dist
          path: cad_fe/dist
  deploy-fe:
    needs: [deploy-proxy, build-fe]
    name: deploy fontend
    runs-on: self-hosted
    steps:
      - run: mkdir -p /opt/projects/codeaday/cad_fe/dist/
      - run: rm -rf /opt/projects/codeaday/cad_fe/dist/*
      - name: Download built package
        uses: actions/download-artifact@v1
        with:
          name: cad_fe_dist
          path: /opt/projects/codeaday/cad_fe/dist/
  deploy-codeaday:
    needs: deploy-fe
    name: Deploy server
    runs-on: self-hosted
    steps:
      - name: Docker login
        run: sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
      - name: pull
        run: sudo docker-compose up -d
        # TODO: local_settings
      - name: setup server
        if: success()
        run: |
          sudo docker exec codeaday-server sh -c "cd /cad_server && /cad_server/setup.sh"
          sudo docker exec codeaday-server /usr/local/bin/python /cad_server/manage.py migrate
          sudo docker exec codeaday-server /usr/local/bin/python /cad_server/manage.py loaddata /cad_server/kb.json
          sudo docker exec codeaday-server /etc/init.d/supervisor start
          